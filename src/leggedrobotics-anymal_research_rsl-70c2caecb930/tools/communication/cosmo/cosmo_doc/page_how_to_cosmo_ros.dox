/*! \page page_how_to_cosmo_ros Use cosmo in combination with ROS

The cosmo_ros package can be used when cosmo should be used in combination with ROS.

<H3>Header</H3>

Include the cosmo ROS header in your code.

\code{c}
#include <cosmo_ros/cosmo_ros.hpp>
\endcode

<H3>Create a Shared Memory ROS Message</H3>  In addition to the standard shared memory message used in the cosmo example,
conversion traits need to be implemented to convert between ROS and shared memory messages.

\code{c}

namespace shared_memory {
class TestMessage {
public:
    TestMessage() : a(0) {}

    int a;
};

}

// Forward declaration
template<typename Msg_, typename MsgRos_>
class ConversionTraits;

//! Conversions between shared memory message and ROS message.
template<>
class ConversionTraits<shared_memory::TestMessage, cosmo_ros_example::TestMessage> {
public:
    inline static cosmo_ros_example::TestMessage convert(const shared_memory::TestMessage& shmMsg) {
        cosmo_ros_example::TestMessage rosMsg;
        rosMsg.a = shmMsg.a;
        return rosMsg;
    }

    inline static shared_memory::TestMessage convert(const cosmo_ros_example::TestMessage& rosMsg) {
        shared_memory::TestMessage shmMsg;
        shmMsg.a = rosMsg.a;
        return shmMsg;
    }
};
\endcode

The corresponding ROS message is generated by the msg file:

\code{c}
# TestMessage.msg
int32 a
\endcode

<H3>Create a Cosmo ROS Publisher</H3>
The cosmo ROS publisher is configured with options:

\code{c}
    ros::NodeHandle nh;
    std::string topicName = "test";
    auto options = std::make_shared<cosmo_ros::PublisherRosOptions>(topicName, nh);
\endcode

Use the helper functions to instantiate a cosmo ROS publisher.

\code{c}
    typedef shared_memory::TestMessage TestMessageShm;
    publisher_ = cosmo_ros::advertiseShmRos<TestMessageShm, TestMessage, ConversionTraits>(options);
\endcode

Use the publishAndSend method to write the message to the shared memory and to transmit it with ROS.


\code{c}
    shared_memory::TestMessage msg;
    pub->publishAndSend(msg);
\endcode

Alternatively you could use the publish method to write the message on the shared memory and stage it into the ros message queue.
Staged messages can then be sent over ROS using the sendRos method.

\code{c}
    shared_memory::TestMessage msg;
    pub->publish(msg);
    pub->sendRos();

\endcode


<H3>Create a Cosmo ROS Subscriber</H3>

The definition of the callback to handle incoming messages can be done analogously to the non ROS example: 

\code{c}
class MyClass {
public:
    void callback(const shared_memory::TestMessage& msg) {
      MELO_INFO_STREAM("Subscriber received a: " << msg.a);
    }
};
\endcode

Again the cosmo ROS subscriber is configured with options:

\code{c}
    ros::NodeHandle nh;
    MyClass instance;
    std::string topic = "/test";
    auto options = std::make_shared<cosmo_ros::SubscriberRosOptions<shared_memory::TestMessage>>(topic, std::bind(&MyClass::callback, &instance, std::placeholders::_1), nh);
\endcode

Use the helper functions to instantiate a cosmo ROS subscriber.

\code{c}
    auto sub = cosmo_ros::subscribeShmRos<shared_memory::TestMessage, TestMessage, ConversionTraits>(options);
\endcode

Again, the receive method can be called to receive new messages. The receive method in cosmo_ros can handle shared memory and ROS messages.
\code{c}
    std::chrono::microseconds maxLockTime = std::chrono::microseconds{1200000};
    bool receivedMsg;
    receivedMsg = sub->receive(maxLockTime);
\endcode

The full source code of this example and other possibilities to create cosmo ROS publisher and subsriber can be found in cosmo_ros_example.

*/