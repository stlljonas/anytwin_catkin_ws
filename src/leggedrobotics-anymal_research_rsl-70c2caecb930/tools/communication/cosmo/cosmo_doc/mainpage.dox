/*!
\mainpage Overview

\section cosmo COSMO - Communication Over Shared Memory On-demand
This library provides a tools for processes to communicate over shared memory. Since shared memory is allocated on a local machine, this library cannot
be used as a communication layer between processes running on different computers. It is designed to have a very similar interface as ROS: Publishers send
Messages on a Topic which are then received by Subscribers. In contrast to ROS, it is suitable for time critical communication, as messages are received
by the subscribers much faster; Sending a message only requires a copy operation of the raw data.

\section limitations Limitations
Some objects cannot be used in combination with shared memory, because they lead to problems when trying to access them in a process which is not the
same as the process which constructed them. This includes the following:
<ul>
  <li> Any heap memory, so pointers, references and all containers of C++ STL, except std::array, are not allowed. This also includes objects owning one of these types.</li>
  <li> You cannot call virtual functions on objects in shared memory. The pointer to the virtual table is in the address space of the constructing process and cannot be accessed by any other process.</li>
  <li> Be careful with static members, they are allocated in global scope and are not owned by the instance of an object and are thus not copied together with the instance to shared memory.</li>
</ul>

See <a href="http://www.boost.org/doc/libs/1_46_0/doc/html/interprocess/sharedmemorybetweenprocesses.html#interprocess.sharedmemorybetweenprocesses.mapped_region_object_limitations">Boost documenation</a> for details.

\section cosmo_ros ROS extension

The cosmo_rosÂ implementation allows to publish messages over both, shared memory and ROS, at the same time. The Subscriber can then either receive over shared
memory or over ROS, but not over both channels at the same time. Shared memory is prioritized.

\section source_code Source Code
The source code is available at <a href="https://bitbucket.org/leggedrobotics/cosmo">https://bitbucket.org/leggedrobotics/cosmo</a>.

\section license License
This library is licensed under Proprietary license.

\section acknowledgement Acknowledgement
Involved people:
 - Philipp Leemann
 - Christian Gehring

Contact:
Philipp Leemann (pleemann ( at ) ethz.ch)
*/
//--------------------------------------------------------
/*! \page getting_started Getting started

This is a very short guide on how to get started with this library.

\section requirements Requirements
This library is written using C++11 and Boost.

 - GCC 4.7 is required at the minimum.
 - <a href="http://wiki.ros.org/catkin">catkin</a> is used to build the library

\section dependencies Dependencies

The regular cosmo is non ROS dependent and requires the following components:

<ul>
  <li><a href="http://www.boost.org/">boost</a></li>
  <li><a href="https://github.com/anybotics/message_logger">message_logger</a></li>
  <li><a href="https://bitbucket.org/leggedrobotics/any_common">any_common</a></li>
</ul>

The cosmo_ros package requires the following additional components:
<ul>
  <li><a href="http://wiki.ros.org/roscpp">roscpp</a></li>
  <li><a href="http://wiki.ros.org/std_msgs">std_msgs</a></li>
  <li><a href="http://wiki.ros.org/message_generation">message_generation</a></li>
</ul>


\section install Installation
\subsection build_lib_catkin Build the Library with Catkin

Build cosmo with [catkin](wiki.ros.org/catkin):

\code{.sh}
cd ~/catkin_ws/src
git clone https://bitbucket.org/leggedrobotics/cosmo
catkin_make
\endcode

or with [catkin command line tools](http://catkin-tools.readthedocs.org):

\code{.sh}
cd ~/catkin_ws/src
git clone https://bitbucket.org/leggedrobotics/cosmo
catkin build cosmo
\endcode

For additionally building the ROS version of cosmo:
\code{.sh}
catkin build cosmo_ros
\endcode

For building the cosmo_example use:
\code{.sh}
catkin build cosmo_example
\endcode

And for building the cosmo_ros_example use:
\code{.sh}
catkin build cosmo_ros_example
\endcode


\subsection build_doc Build this Documentation
<a href="http://www.stack.nl/~dimitri/doxygen/" >Doxygen</a> needs to be installed to create this documentation.

\code{.sh}
cd ~/catkin_ws
catkin build cosmo_doc
\endcode
The doxygen documentation can be found here:
doc/doxygen/doc/html/index.html

\section sec_continue How to Continue
\ref page_how_to "How-To" use this library.

*/

//-----------------------------------------------------------

/*!
\page page_how_to How To
 - \subpage page_how_to_cosmo <BR>
 - \subpage page_how_to_cosmo_ros <BR>

*/

//-----------------------------------------------------------
